// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewImportVersionLuParams creates a new ImportVersionLuParams object
// with the default values initialized.
func NewImportVersionLuParams() *ImportVersionLuParams {
	var ()
	return &ImportVersionLuParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewImportVersionLuParamsWithTimeout creates a new ImportVersionLuParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportVersionLuParamsWithTimeout(timeout time.Duration) *ImportVersionLuParams {
	var ()
	return &ImportVersionLuParams{

		timeout: timeout,
	}
}

// NewImportVersionLuParamsWithContext creates a new ImportVersionLuParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportVersionLuParamsWithContext(ctx context.Context) *ImportVersionLuParams {
	var ()
	return &ImportVersionLuParams{

		Context: ctx,
	}
}

// NewImportVersionLuParamsWithHTTPClient creates a new ImportVersionLuParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportVersionLuParamsWithHTTPClient(client *http.Client) *ImportVersionLuParams {
	var ()
	return &ImportVersionLuParams{
		HTTPClient: client,
	}
}

/*ImportVersionLuParams contains all the parameters to send to the API endpoint
for the import version lu operation typically these are written to a http.Request
*/
type ImportVersionLuParams struct {

	/*AppID
	  Format - guid. The application ID.

	*/
	AppID string
	/*Content
	  A LuDown representing the LUIS application structure

	*/
	Content string
	/*VersionID
	  The imported versionId.

	*/
	VersionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import version lu params
func (o *ImportVersionLuParams) WithTimeout(timeout time.Duration) *ImportVersionLuParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import version lu params
func (o *ImportVersionLuParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import version lu params
func (o *ImportVersionLuParams) WithContext(ctx context.Context) *ImportVersionLuParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import version lu params
func (o *ImportVersionLuParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import version lu params
func (o *ImportVersionLuParams) WithHTTPClient(client *http.Client) *ImportVersionLuParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import version lu params
func (o *ImportVersionLuParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppID adds the appID to the import version lu params
func (o *ImportVersionLuParams) WithAppID(appID string) *ImportVersionLuParams {
	o.SetAppID(appID)
	return o
}

// SetAppID adds the appId to the import version lu params
func (o *ImportVersionLuParams) SetAppID(appID string) {
	o.AppID = appID
}

// WithContent adds the content to the import version lu params
func (o *ImportVersionLuParams) WithContent(content string) *ImportVersionLuParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the import version lu params
func (o *ImportVersionLuParams) SetContent(content string) {
	o.Content = content
}

// WithVersionID adds the versionID to the import version lu params
func (o *ImportVersionLuParams) WithVersionID(versionID *string) *ImportVersionLuParams {
	o.SetVersionID(versionID)
	return o
}

// SetVersionID adds the versionId to the import version lu params
func (o *ImportVersionLuParams) SetVersionID(versionID *string) {
	o.VersionID = versionID
}

// WriteToRequest writes these params to a swagger request
func (o *ImportVersionLuParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param appId
	if err := r.SetPathParam("appId", o.AppID); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.Content); err != nil {
		return err
	}

	if o.VersionID != nil {

		// query param versionId
		var qrVersionID string
		if o.VersionID != nil {
			qrVersionID = *o.VersionID
		}
		qVersionID := qrVersionID
		if qVersionID != "" {
			if err := r.SetQueryParam("versionId", qVersionID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/crazedpeanut/go-luis-authoring-client/models"
)

// NewImportApplicationParams creates a new ImportApplicationParams object
// with the default values initialized.
func NewImportApplicationParams() *ImportApplicationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportApplicationParams{
		ContentType: &contentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewImportApplicationParamsWithTimeout creates a new ImportApplicationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportApplicationParamsWithTimeout(timeout time.Duration) *ImportApplicationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportApplicationParams{
		ContentType: &contentTypeDefault,

		timeout: timeout,
	}
}

// NewImportApplicationParamsWithContext creates a new ImportApplicationParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportApplicationParamsWithContext(ctx context.Context) *ImportApplicationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportApplicationParams{
		ContentType: &contentTypeDefault,

		Context: ctx,
	}
}

// NewImportApplicationParamsWithHTTPClient creates a new ImportApplicationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportApplicationParamsWithHTTPClient(client *http.Client) *ImportApplicationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportApplicationParams{
		ContentType: &contentTypeDefault,
		HTTPClient:  client,
	}
}

/*ImportApplicationParams contains all the parameters to send to the API endpoint
for the import application operation typically these are written to a http.Request
*/
type ImportApplicationParams struct {

	/*ContentType
	  Media type of the request body

	*/
	ContentType *string
	/*AppName
	  The imported application name.

	*/
	AppName *string
	/*JSONApp
	  A JSON representing the LUIS application structure.

	*/
	JSONApp *models.JSONApp

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import application params
func (o *ImportApplicationParams) WithTimeout(timeout time.Duration) *ImportApplicationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import application params
func (o *ImportApplicationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import application params
func (o *ImportApplicationParams) WithContext(ctx context.Context) *ImportApplicationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import application params
func (o *ImportApplicationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import application params
func (o *ImportApplicationParams) WithHTTPClient(client *http.Client) *ImportApplicationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import application params
func (o *ImportApplicationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the import application params
func (o *ImportApplicationParams) WithContentType(contentType *string) *ImportApplicationParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the import application params
func (o *ImportApplicationParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithAppName adds the appName to the import application params
func (o *ImportApplicationParams) WithAppName(appName *string) *ImportApplicationParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the import application params
func (o *ImportApplicationParams) SetAppName(appName *string) {
	o.AppName = appName
}

// WithJSONApp adds the jSONApp to the import application params
func (o *ImportApplicationParams) WithJSONApp(jSONApp *models.JSONApp) *ImportApplicationParams {
	o.SetJSONApp(jSONApp)
	return o
}

// SetJSONApp adds the jSONApp to the import application params
func (o *ImportApplicationParams) SetJSONApp(jSONApp *models.JSONApp) {
	o.JSONApp = jSONApp
}

// WriteToRequest writes these params to a swagger request
func (o *ImportApplicationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContentType != nil {

		// header param Content-Type
		if err := r.SetHeaderParam("Content-Type", *o.ContentType); err != nil {
			return err
		}

	}

	if o.AppName != nil {

		// query param appName
		var qrAppName string
		if o.AppName != nil {
			qrAppName = *o.AppName
		}
		qAppName := qrAppName
		if qAppName != "" {
			if err := r.SetQueryParam("appName", qAppName); err != nil {
				return err
			}
		}

	}

	if o.JSONApp != nil {
		if err := r.SetBodyParam(o.JSONApp); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

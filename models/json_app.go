// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// JSONApp JSON app
// swagger:model JSONApp
type JSONApp struct {

	// actions
	Actions []*JSONAction `json:"actions"`

	// bing entities
	BingEntities []string `json:"bing_entities"`

	// closed lists
	ClosedLists []*JSONClosedList `json:"closedLists"`

	// composites
	Composites []*HierarchicalModel `json:"composites"`

	// culture
	Culture string `json:"culture,omitempty"`

	// desc
	Desc string `json:"desc,omitempty"`

	// entities
	Entities []*HierarchicalModel `json:"entities"`

	// intents
	Intents []*HierarchicalModel `json:"intents"`

	// model features
	ModelFeatures []*JSONModelFeature `json:"model_features"`

	// name
	Name string `json:"name,omitempty"`

	// regex features
	RegexFeatures []*JSONRegexFeature `json:"regex_features"`

	// utterances
	Utterances []*JSONUtterance `json:"utterances"`

	// version Id
	VersionID string `json:"versionId,omitempty"`
}

// Validate validates this JSON app
func (m *JSONApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClosedLists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComposites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegexFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUtterances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JSONApp) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JSONApp) validateClosedLists(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedLists) { // not required
		return nil
	}

	for i := 0; i < len(m.ClosedLists); i++ {
		if swag.IsZero(m.ClosedLists[i]) { // not required
			continue
		}

		if m.ClosedLists[i] != nil {
			if err := m.ClosedLists[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("closedLists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JSONApp) validateComposites(formats strfmt.Registry) error {

	if swag.IsZero(m.Composites) { // not required
		return nil
	}

	for i := 0; i < len(m.Composites); i++ {
		if swag.IsZero(m.Composites[i]) { // not required
			continue
		}

		if m.Composites[i] != nil {
			if err := m.Composites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("composites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JSONApp) validateEntities(formats strfmt.Registry) error {

	if swag.IsZero(m.Entities) { // not required
		return nil
	}

	for i := 0; i < len(m.Entities); i++ {
		if swag.IsZero(m.Entities[i]) { // not required
			continue
		}

		if m.Entities[i] != nil {
			if err := m.Entities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JSONApp) validateIntents(formats strfmt.Registry) error {

	if swag.IsZero(m.Intents) { // not required
		return nil
	}

	for i := 0; i < len(m.Intents); i++ {
		if swag.IsZero(m.Intents[i]) { // not required
			continue
		}

		if m.Intents[i] != nil {
			if err := m.Intents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JSONApp) validateModelFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.ModelFeatures) { // not required
		return nil
	}

	for i := 0; i < len(m.ModelFeatures); i++ {
		if swag.IsZero(m.ModelFeatures[i]) { // not required
			continue
		}

		if m.ModelFeatures[i] != nil {
			if err := m.ModelFeatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("model_features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JSONApp) validateRegexFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.RegexFeatures) { // not required
		return nil
	}

	for i := 0; i < len(m.RegexFeatures); i++ {
		if swag.IsZero(m.RegexFeatures[i]) { // not required
			continue
		}

		if m.RegexFeatures[i] != nil {
			if err := m.RegexFeatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regex_features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JSONApp) validateUtterances(formats strfmt.Registry) error {

	if swag.IsZero(m.Utterances) { // not required
		return nil
	}

	for i := 0; i < len(m.Utterances); i++ {
		if swag.IsZero(m.Utterances[i]) { // not required
			continue
		}

		if m.Utterances[i] != nil {
			if err := m.Utterances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("utterances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *JSONApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JSONApp) UnmarshalBinary(b []byte) error {
	var res JSONApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

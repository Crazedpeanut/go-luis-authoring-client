// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAssignAzureAccountParams creates a new AssignAzureAccountParams object
// with the default values initialized.
func NewAssignAzureAccountParams() *AssignAzureAccountParams {
	var ()
	return &AssignAzureAccountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAssignAzureAccountParamsWithTimeout creates a new AssignAzureAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAssignAzureAccountParamsWithTimeout(timeout time.Duration) *AssignAzureAccountParams {
	var ()
	return &AssignAzureAccountParams{

		timeout: timeout,
	}
}

// NewAssignAzureAccountParamsWithContext creates a new AssignAzureAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewAssignAzureAccountParamsWithContext(ctx context.Context) *AssignAzureAccountParams {
	var ()
	return &AssignAzureAccountParams{

		Context: ctx,
	}
}

// NewAssignAzureAccountParamsWithHTTPClient creates a new AssignAzureAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAssignAzureAccountParamsWithHTTPClient(client *http.Client) *AssignAzureAccountParams {
	var ()
	return &AssignAzureAccountParams{
		HTTPClient: client,
	}
}

/*AssignAzureAccountParams contains all the parameters to send to the API endpoint
for the assign azure account operation typically these are written to a http.Request
*/
type AssignAzureAccountParams struct {

	/*Authorization
	  The bearer authorization header to use; containing the user's ARM token used to validate azure accounts information.

	Follow the steps [here](https://docs.microsoft.com/en-gb/azure/cognitive-services/luis/luis-how-to-azure-subscription#assign-resource-without-luis-portal) to generate an ARM Token.

	*/
	Authorization string
	/*AppID
	  Format - guid. The application ID.

	*/
	AppID string
	/*AzureAccountInfoObject
	  The azure account information object.

	*/
	AzureAccountInfoObject interface{}

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the assign azure account params
func (o *AssignAzureAccountParams) WithTimeout(timeout time.Duration) *AssignAzureAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the assign azure account params
func (o *AssignAzureAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the assign azure account params
func (o *AssignAzureAccountParams) WithContext(ctx context.Context) *AssignAzureAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the assign azure account params
func (o *AssignAzureAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the assign azure account params
func (o *AssignAzureAccountParams) WithHTTPClient(client *http.Client) *AssignAzureAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the assign azure account params
func (o *AssignAzureAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the assign azure account params
func (o *AssignAzureAccountParams) WithAuthorization(authorization string) *AssignAzureAccountParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the assign azure account params
func (o *AssignAzureAccountParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAppID adds the appID to the assign azure account params
func (o *AssignAzureAccountParams) WithAppID(appID string) *AssignAzureAccountParams {
	o.SetAppID(appID)
	return o
}

// SetAppID adds the appId to the assign azure account params
func (o *AssignAzureAccountParams) SetAppID(appID string) {
	o.AppID = appID
}

// WithAzureAccountInfoObject adds the azureAccountInfoObject to the assign azure account params
func (o *AssignAzureAccountParams) WithAzureAccountInfoObject(azureAccountInfoObject interface{}) *AssignAzureAccountParams {
	o.SetAzureAccountInfoObject(azureAccountInfoObject)
	return o
}

// SetAzureAccountInfoObject adds the azureAccountInfoObject to the assign azure account params
func (o *AssignAzureAccountParams) SetAzureAccountInfoObject(azureAccountInfoObject interface{}) {
	o.AzureAccountInfoObject = azureAccountInfoObject
}

// WriteToRequest writes these params to a swagger request
func (o *AssignAzureAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param appId
	if err := r.SetPathParam("appId", o.AppID); err != nil {
		return err
	}

	if o.AzureAccountInfoObject != nil {
		if err := r.SetBodyParam(o.AzureAccountInfoObject); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

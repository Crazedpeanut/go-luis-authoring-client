// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/crazedpeanut/go-luis-authoring-client/models"
)

// NewUpdatePhraseListFeatureParams creates a new UpdatePhraseListFeatureParams object
// with the default values initialized.
func NewUpdatePhraseListFeatureParams() *UpdatePhraseListFeatureParams {
	var ()
	return &UpdatePhraseListFeatureParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdatePhraseListFeatureParamsWithTimeout creates a new UpdatePhraseListFeatureParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdatePhraseListFeatureParamsWithTimeout(timeout time.Duration) *UpdatePhraseListFeatureParams {
	var ()
	return &UpdatePhraseListFeatureParams{

		timeout: timeout,
	}
}

// NewUpdatePhraseListFeatureParamsWithContext creates a new UpdatePhraseListFeatureParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdatePhraseListFeatureParamsWithContext(ctx context.Context) *UpdatePhraseListFeatureParams {
	var ()
	return &UpdatePhraseListFeatureParams{

		Context: ctx,
	}
}

// NewUpdatePhraseListFeatureParamsWithHTTPClient creates a new UpdatePhraseListFeatureParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdatePhraseListFeatureParamsWithHTTPClient(client *http.Client) *UpdatePhraseListFeatureParams {
	var ()
	return &UpdatePhraseListFeatureParams{
		HTTPClient: client,
	}
}

/*UpdatePhraseListFeatureParams contains all the parameters to send to the API endpoint
for the update phrase list feature operation typically these are written to a http.Request
*/
type UpdatePhraseListFeatureParams struct {

	/*AppID
	  Format - guid. The application ID.

	*/
	AppID string
	/*PhraselistID
	  The ID of the feature to be updated.

	*/
	PhraselistID int64
	/*PhraselistUpdateObject
	  A JSON object with properties of one of the following examples:
	```json
	{
	    "id": 507596,
	    "name": "Eno",
	    "phrases": "hello,goodbye know,e know,eno",
	    "isExchangeable": true,
	    "isActive": true
	}
	```
	```json
	{"IsActive":true}
	```

	*/
	PhraselistUpdateObject *models.PhraselistUpdateObject
	/*VersionID
	  The version ID of the task.

	*/
	VersionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) WithTimeout(timeout time.Duration) *UpdatePhraseListFeatureParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) WithContext(ctx context.Context) *UpdatePhraseListFeatureParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) WithHTTPClient(client *http.Client) *UpdatePhraseListFeatureParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppID adds the appID to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) WithAppID(appID string) *UpdatePhraseListFeatureParams {
	o.SetAppID(appID)
	return o
}

// SetAppID adds the appId to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) SetAppID(appID string) {
	o.AppID = appID
}

// WithPhraselistID adds the phraselistID to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) WithPhraselistID(phraselistID int64) *UpdatePhraseListFeatureParams {
	o.SetPhraselistID(phraselistID)
	return o
}

// SetPhraselistID adds the phraselistId to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) SetPhraselistID(phraselistID int64) {
	o.PhraselistID = phraselistID
}

// WithPhraselistUpdateObject adds the phraselistUpdateObject to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) WithPhraselistUpdateObject(phraselistUpdateObject *models.PhraselistUpdateObject) *UpdatePhraseListFeatureParams {
	o.SetPhraselistUpdateObject(phraselistUpdateObject)
	return o
}

// SetPhraselistUpdateObject adds the phraselistUpdateObject to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) SetPhraselistUpdateObject(phraselistUpdateObject *models.PhraselistUpdateObject) {
	o.PhraselistUpdateObject = phraselistUpdateObject
}

// WithVersionID adds the versionID to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) WithVersionID(versionID string) *UpdatePhraseListFeatureParams {
	o.SetVersionID(versionID)
	return o
}

// SetVersionID adds the versionId to the update phrase list feature params
func (o *UpdatePhraseListFeatureParams) SetVersionID(versionID string) {
	o.VersionID = versionID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdatePhraseListFeatureParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param appId
	if err := r.SetPathParam("appId", o.AppID); err != nil {
		return err
	}

	// path param phraselistId
	if err := r.SetPathParam("phraselistId", swag.FormatInt64(o.PhraselistID)); err != nil {
		return err
	}

	if o.PhraselistUpdateObject != nil {
		if err := r.SetBodyParam(o.PhraselistUpdateObject); err != nil {
			return err
		}
	}

	// path param versionId
	if err := r.SetPathParam("versionId", o.VersionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

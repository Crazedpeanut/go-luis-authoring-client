// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateVersionReader is a Reader for the UpdateVersion structure.
type UpdateVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateVersionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateVersionOK creates a UpdateVersionOK with default headers values
func NewUpdateVersionOK() *UpdateVersionOK {
	return &UpdateVersionOK{}
}

/*UpdateVersionOK handles this case with default header values.

UpdateVersionOK update version o k
*/
type UpdateVersionOK struct {
}

func (o *UpdateVersionOK) Error() string {
	return fmt.Sprintf("[PUT /apps/{appId}/versions/{versionId}/][%d] updateVersionOK ", 200)
}

func (o *UpdateVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVersionBadRequest creates a UpdateVersionBadRequest with default headers values
func NewUpdateVersionBadRequest() *UpdateVersionBadRequest {
	return &UpdateVersionBadRequest{}
}

/*UpdateVersionBadRequest handles this case with default header values.

This error can be returned if the request's parameters are incorrect meaning the required parameters are missing, malformed, or too large.

This error can be returned if the request's body is incorrect meaning the JSON is missing, malformed, or too large.
*/
type UpdateVersionBadRequest struct {
}

func (o *UpdateVersionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /apps/{appId}/versions/{versionId}/][%d] updateVersionBadRequest ", 400)
}

func (o *UpdateVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVersionUnauthorized creates a UpdateVersionUnauthorized with default headers values
func NewUpdateVersionUnauthorized() *UpdateVersionUnauthorized {
	return &UpdateVersionUnauthorized{}
}

/*UpdateVersionUnauthorized handles this case with default header values.

You do not have access.

Reasons can include:

* used endpoint subscription key, instead of authoring key
* invalid, malformed, or empty authoring key
* authoring key doesn't match region
* you are not the owner or collaborator
* invalid order of API calls

*/
type UpdateVersionUnauthorized struct {
}

func (o *UpdateVersionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /apps/{appId}/versions/{versionId}/][%d] updateVersionUnauthorized ", 401)
}

func (o *UpdateVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVersionForbidden creates a UpdateVersionForbidden with default headers values
func NewUpdateVersionForbidden() *UpdateVersionForbidden {
	return &UpdateVersionForbidden{}
}

/*UpdateVersionForbidden handles this case with default header values.

Total monthly key quota limit exceeded
*/
type UpdateVersionForbidden struct {
}

func (o *UpdateVersionForbidden) Error() string {
	return fmt.Sprintf("[PUT /apps/{appId}/versions/{versionId}/][%d] updateVersionForbidden ", 403)
}

func (o *UpdateVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVersionTooManyRequests creates a UpdateVersionTooManyRequests with default headers values
func NewUpdateVersionTooManyRequests() *UpdateVersionTooManyRequests {
	return &UpdateVersionTooManyRequests{}
}

/*UpdateVersionTooManyRequests handles this case with default header values.

Rate limit is exceeded.
*/
type UpdateVersionTooManyRequests struct {
}

func (o *UpdateVersionTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /apps/{appId}/versions/{versionId}/][%d] updateVersionTooManyRequests ", 429)
}

func (o *UpdateVersionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
